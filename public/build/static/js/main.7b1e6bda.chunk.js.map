{"version":3,"sources":["Socket.js","Appbar.js","App.js","CreateGame.js","JoinGame.js","PlayerCard.js","GameRoom.js","Card/img/carreau-rouge.svg","Card/img/coeur-noir.svg","Card/img/coeur-rouge.svg","Card/img/dame-noir.svg","Card/img/dame-rouge.svg","Card/img/pique-noir.svg","Card/img/pique-rouge.svg","Card/img/roi-noir.svg","Card/img/roi-rouge.svg","Card/img/trefle-noir.svg","Card/img/trefle-rouge.svg","Card/img/valet-noir.svg","Card/img/valet-rouge.svg","Card/img/picole-nationale.jpg","Card/CardModel.js","PlayGameRoom.js","index.js"],"names":["socket","socketIOClient","transports","Appbar","Toolbar","AppBar","Typography","variant","style","textAlign","SwipeableDrawer","anchor","open","ListItem","button","ListItemText","primary","App","props","useCookies","cookies","setCookie","useEffect","undefined","userID","date","Date","setDate","getDate","uniqid","time","expires","window","location","reload","useQuery","fetch","then","res","json","isLoading","error","data","Container","Grid","container","direction","justify","spacing","item","to","Button","color","size","xs","filter","r","isStarted","map","room","index","code","Fab","aria-label","name","players","length","marginTop","CreateGame","history","useHistory","useState","username","setUsername","roomName","setRoomName","saveUsernameInCookie","playerCanSeeCardInGame","setPlayerCanSeeCardInGame","alignItems","alignContent","TextField","value","onChange","e","currentTarget","label","fullWidth","FormControlLabel","control","Switch","checked","onClick","emit","on","roomInfo","push","JoinGame","match","useRouteMatch","params","roomCode","setRoomCode","Swal","fire","PlayerCard","Card","CardHeader","avatar","Avatar","playerName","substring","toUpperCase","title","isHost","GameRoom","gameRoom","setGameRoom","getRoomData","icon","playerInfo","showDenyButton","showCancelButton","confirmButtonText","denyButtonText","result","isConfirmed","isDenied","text","secondRes","toast","timer","timerProgressBar","showConfirmButton","axios","get","catch","err","find","p","cookieID","CardModel","lettersHandler","letters","Error","imageHandler","imageToSearch","image","CARREAUROUGE","COEURNOIR","COEURROUGE","DAMENOIR","DAMEROUGE","PIQUENOIR","PIQUEROUGE","ROINOIR","ROIROUGE","TREFLENOIR","TREFLEROUGE","VALETNOIR","VALETROUGE","handleClickOnCard","canFlipCard","cardid","ranknumber","cardnumber","state","isBackFace","bouncing","cardID","cardRank","setState","cardNumber","this","canSeeCard","timerInterval","position","html","didOpen","showLoading","setInterval","content","getHtmlContainer","b","querySelector","textContent","getTimerLeft","toFixed","willClose","clearInterval","dismiss","DismissReason","console","log","setTimeout","timeInSecond","prevProps","prevState","snapshot","iconType","classOfParent","className","backgroundImage","PICOLENATIONAL","number","Array","x","i","background","height","width","backgroundSize","backgroundRepeat","src","alt","Component","PlayGameRoom","currentPlayer","totalCardInGame","cards","concat","apply","rank","rankNumber","margin","display","justifyContent","card","id","isFlipped","userCanSeeHerCard","queryClient","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","CookiesProvider","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.7b1e6bda.chunk.js","sourcesContent":["import socketIOClient from 'socket.io-client';\n\nconst ENDPOINT = 'pyramidsgame.herokuapp.com'\nconst socket = socketIOClient(ENDPOINT, {transports: ['websocket']});\n\nexport default socket;","import {AppBar, ListItem, ListItemText, SwipeableDrawer, Toolbar, Typography} from '@material-ui/core';\nimport React from 'react';\n\nexport default function Appbar()\n{\n    return (\n        <Toolbar>\n            <AppBar>\n                <Typography variant=\"h6\" style={{textAlign: 'center'}}>\n                    La pyramide !\n                </Typography>\n            </AppBar>\n            <SwipeableDrawer\n                anchor={'left'}\n                open={false}\n            >\n                <ListItem button>\n                    <ListItemText primary={'text'}/>\n                </ListItem>\n            </SwipeableDrawer>\n        </Toolbar>\n    );\n}","import {useEffect} from 'react';\nimport socket from './Socket';\nimport uniqid from 'uniqid';\nimport {useCookies} from 'react-cookie';\nimport Appbar from './Appbar';\nimport {Button, Container, Fab, Grid, Typography} from '@material-ui/core';\nimport {Link} from 'react-router-dom';\nimport {useQuery} from 'react-query';\n\nexport default function App(props)\n{\n    const [cookies, setCookie] = useCookies(['userID']);\n    useEffect(() =>\n    {\n        if (cookies.userID === undefined) {\n            let date = new Date();\n            date.setDate(date.getDate() + 1);\n            setCookie('userID', uniqid.time('player-', '-id'), {\n                expires: date,\n            });\n            window.location.reload();\n        }\n    });\n\n    const {isLoading, error, data} = useQuery('repoData', () =>\n        fetch(`https://pyramidsgame.herokuapp.com/api/room/get/all`).then(res =>\n            res.json(),\n        ));\n\n    return (\n        <Container>\n            <Grid container direction={'row'} justify={'center'} spacing={4}>\n                <Grid item>\n                    <Link to=\"/game/create\">\n                        <Button variant=\"contained\" color=\"primary\" size={'large'}>\n                            Créer une partie\n                        </Button>\n                    </Link>\n                </Grid>\n                <Grid item>\n                    <Link to=\"/game/join\">\n                        <Button variant=\"contained\" color=\"secondary\" size={'large'}>\n                            Rejoindre une partie\n                        </Button>\n                    </Link>\n                </Grid>\n            </Grid>\n            <Grid container direction={'row'} justify={'center'} spacing={4}>\n                {isLoading && 'Loading'}\n                {error && 'An error' + error}\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Typography>Partie en attente de lancement</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container spacing={2}>\n                            {data !== undefined && data.filter(r => !r.isStarted).map((room, index) =>\n                                <Grid key={index} item>\n                                    <Link to={`/game/join/${room.code}`}>\n                                        <Fab\n                                            variant=\"extended\"\n                                            size=\"small\"\n                                            color=\"primary\"\n                                            aria-label=\"add\"\n                                        >\n                                            {room.name} - ({room.players.length} joueurs)\n                                        </Fab>\n                                    </Link>\n                                </Grid>,\n                            )}\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container spacing={2} style={{marginTop: '2rem'}}>\n                    <Grid item xs={12}>\n                        <Typography>Partie en cours</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container spacing={2}>\n                            {data !== undefined && data.filter(r => r.isStarted).map((room, index) =>\n                                <Grid key={index} item>\n                                    <Link to={`/game/join/${room.code}`}>\n                                        <Fab\n                                            variant=\"extended\"\n                                            size=\"small\"\n                                            color=\"primary\"\n                                            aria-label=\"add\"\n                                        >\n                                            {room.name} - ({room.players.length} joueurs)\n                                        </Fab>\n                                    </Link>\n                                </Grid>,\n                            )}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Container>\n    );\n}","import {Button, FormControlLabel, Grid, Switch, TextField, Typography} from '@material-ui/core';\nimport {Link, useHistory} from 'react-router-dom';\nimport socket from './Socket';\nimport {useCookies} from 'react-cookie';\nimport {useState} from 'react';\n\nexport default function CreateGame()\n{\n    let history = useHistory();\n    const [cookies, setCookie] = useCookies(['userID']);\n    const [username, setUsername] = useState(cookies.username);\n    const [roomName, setRoomName] = useState(cookies.username ? `Salon de ${cookies.username}` : '');\n    const handleUsernameInput = (e) =>\n    {\n        setUsername(e.currentTarget.value);\n    };\n    const handleRoomName = (e) =>\n    {\n        setRoomName(e.currentTarget.value);\n    };\n    const handleJoinBtn = (e) =>\n    {\n        saveUsernameInCookie();\n        socket.emit('playerCreateGame', {roomName, username}, cookies.userID, {playerCanSeeCardInGame});\n        socket.on('successfullyCreateGame', (roomInfo) =>\n        {\n            history.push(`/game/room/${roomInfo.code}`);\n        });\n    };\n    const saveUsernameInCookie = () =>\n    {\n        let date = new Date();\n        date.setDate(date.getDate() + 365);\n        setCookie('username', username, {\n            expires: date,\n        });\n    };\n    const [playerCanSeeCardInGame, setPlayerCanSeeCardInGame] = useState(true);\n    const handlePlayerCanSeeCardInGame = () =>\n    {\n        setPlayerCanSeeCardInGame(!playerCanSeeCardInGame);\n    };\n    return (\n        <Grid container direction={'row'} alignItems={'center'} alignContent={'center'} justify={'center'} spacing={2}>\n            <Grid item xs={12}>\n                <Link to={'/'}>Retourner à l'accueil</Link>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant={'h6'}>Créer une partie</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <TextField value={username} onChange={handleUsernameInput} label=\"Votre nom de joueur\" fullWidth/>\n            </Grid>\n            <Grid item xs={12}>\n                <TextField value={roomName} onChange={handleRoomName} label=\"Nom du salon de jeu\" fullWidth/>\n            </Grid>\n            <Grid item xs={12}>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={playerCanSeeCardInGame}\n                            onChange={handlePlayerCanSeeCardInGame}\n                            name=\"playerCanSeeCardInGame\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Les joueurs peuvent voir leurs cartes durant la partie ?\"\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Button variant={'contained'} color={'primary'} onClick={handleJoinBtn}>Créer la partie</Button>\n            </Grid>\n        </Grid>\n    );\n}","import React, {useEffect, useState} from 'react';\nimport {Button, Grid, TextField, Typography} from '@material-ui/core';\nimport {Link, useHistory, useRouteMatch} from 'react-router-dom';\nimport socket from './Socket';\nimport {useCookies} from 'react-cookie';\nimport Swal from 'sweetalert2';\nimport uniqid from 'uniqid';\n\nexport default function JoinGame()\n{\n    let history = useHistory();\n    let match = useRouteMatch('/game/join/:roomCode?');\n    const [cookies, setCookie] = useCookies(['userID', 'username']);\n    const [roomCode, setRoomCode] = useState(match.params.roomCode);\n    const [username, setUsername] = useState(cookies.username);\n    const handleJoinBtn = () =>\n    {\n        saveUsernameInCookie();\n        socket.emit('joiningRoom', {username, roomCode}, cookies.userID);\n        socket.on('gameAlreadyStarted', () =>\n        {\n            Swal.fire(`La partie que tu tente de rejoindre est déjà lancer !`);\n        });\n        socket.on('successfullyJoinedRoom', () =>\n        {\n            Swal.fire(`Tu as rejoint la partie avec succès !`);\n            history.push(`/game/room/${roomCode}`);\n        });\n        socket.on('errorWhenJoiningRoom', () =>\n        {\n            Swal.fire(`Pas de salle correspondante au code : [${roomCode}]`);\n        });\n    };\n\n    const saveUsernameInCookie = () =>\n    {\n        let date = new Date();\n        date.setDate(date.getDate() + 365);\n        setCookie('username', username, {\n            expires: date,\n        });\n    };\n\n    const handleRoomCodeInput = (e) =>\n    {\n        setRoomCode(e.currentTarget.value);\n    };\n    const handleUsernameInput = (e) =>\n    {\n        setUsername(e.currentTarget.value);\n    };\n\n    return (\n        <Grid container direction={'row'} alignItems={'center'} alignContent={'center'} justify={'center'} spacing={2}>\n            <Grid item xs={12}>\n                <Link to={'/'}>Retourner à l'accueil</Link>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant={'h6'}>Rejoindre une partie</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <TextField value={username} onChange={handleUsernameInput} label=\"Nom de joueur\" fullWidth/>\n            </Grid>\n            <Grid item xs={12}>\n                <TextField value={roomCode} onChange={handleRoomCodeInput} label=\"Code de la partie\" fullWidth/>\n            </Grid>\n            <Grid item xs={12}>\n                <Button variant={'contained'} color={'primary'} onClick={handleJoinBtn}>Rejoindre la partie</Button>\n            </Grid>\n        </Grid>\n    );\n}","import {Avatar, Card, CardHeader, Grid} from '@material-ui/core';\n\nexport default function PlayerCard(props)\n{\n    return (\n        <Card>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"recipe\">\n                        {props.playerName.substring(0, 1).toUpperCase()}\n                    </Avatar>\n                }\n                title={props.playerName + (props.isHost ? ' (hôte partie)' : '')}\n            />\n        </Card>\n    );\n}","import {Button, Grid, Typography} from '@material-ui/core';\nimport {useEffect, useState} from 'react';\nimport PlayerCard from './PlayerCard';\nimport Swal from 'sweetalert2';\nimport socket from './Socket';\nimport {useHistory, useRouteMatch} from 'react-router-dom';\nimport axios from 'axios';\nimport {useCookies} from 'react-cookie';\n\nexport default function GameRoom()\n{\n    let match = useRouteMatch('/game/room/:roomCode');\n    let history = useHistory();\n    const [cookies, setCookie] = useCookies(['userID']);\n    const [gameRoom, setGameRoom] = useState({});\n\n    useEffect(() =>\n    {\n        getRoomData();\n    }, []);\n    socket.emit('verifyUserIsOnLeavePlayerOrInGameRoom', match.params.roomCode, cookies.userID);\n    socket.on('onUserCannotJoinCauseOfNotInRoom', () =>\n    {\n        Swal.fire({\n            title: `Salut, tu doit rejoindre la partie par le formulaire !`,\n            icon : 'warning',\n        });\n        history.push('/game/join/' + match.params.roomCode);\n    });\n    socket.emit('userAttemptToJoinRoom', match.params.roomCode, cookies.userID);\n    socket.on('roomExistButAlreadyStarted', () =>\n    {\n        Swal.fire({\n            title: `Désolé, la partie que tu recherche existe mais elle est déjà en cours ! Créer en une !`,\n            icon : 'warning',\n        });\n        history.push('/');\n    });\n    socket.on('userFoundInLeavePlayer', (playerInfo) =>\n    {\n        Swal.fire({\n            title            : `Hey ${playerInfo.username} ! Tu nous as quitté trop vite ! Veux tu continuer à jouer ?`,\n            showDenyButton   : true,\n            showCancelButton : true,\n            confirmButtonText: `Rejoindre`,\n            denyButtonText   : `Rage quitte`,\n        }).then((result) =>\n        {\n            if (result.isConfirmed) {\n                socket.emit('userConfirmedJoiningAgain', match.params.roomCode, cookies.userID);\n                socket.on('onJoiningAgainSuccess', () =>\n                {\n                    getRoomData();\n                    Swal.fire('Tu as de nouveau rejoint la partie !', '', 'success');\n                });\n                socket.on('onJoiningAgainFail', () =>\n                {\n                    Swal.fire('Désolé un problème est survenue, on a pas retrouvé t\\'es données de partie :( !', '', 'error');\n                });\n            }\n            else if (result.isDenied) {\n                Swal.fire({\n                    title            : `Tempis casse toi !`,\n                    text             : 'Mais tu est sûr ?',\n                    showDenyButton   : true,\n                    showCancelButton : true,\n                    confirmButtonText: `Non enfaite.`,\n                    denyButtonText   : `Ouai mec !`,\n                }, '', 'warning').then(secondRes =>\n                {\n                    if (secondRes.isConfirmed) {\n                        socket.emit('userConfirmedJoiningAgain', match.params.roomCode, cookies.userID);\n                        socket.on('onJoiningAgainSuccess', () =>\n                        {\n                            getRoomData();\n                            Swal.fire('Tu as de nouveau rejoint la partie chakal va !', '', 'success');\n                        });\n                        socket.on('onJoiningAgainFail', () =>\n                        {\n                            Swal.fire('Ah bas désolé un problème est survenue, on a pas retrouvé t\\'es données de partie :( ! Rage quitte forcé !', '', 'error');\n                        });\n                    }\n                    else if (secondRes.isDenied) {\n                        socket.emit('deleteLeavePlayerIfExist', match.params.roomCode, cookies.userID);\n                        history.push('/');\n                    }\n                });\n            }\n        });\n    });\n    socket.on('userJoinedRoomAfterLeave', (username) =>\n    {\n        Swal.fire({\n            toast: true,\n            text : `${username} vient de revenir !`,\n        });\n        getRoomData();\n    });\n    socket.on('userJoinedRoom', (username) =>\n    {\n        Swal.fire({\n            toast: true,\n            text : `${username} vient de rejoindre !`,\n        });\n        getRoomData();\n    });\n    socket.on('userDisconnect', (username) =>\n    {\n        Swal.fire({\n            toast: true,\n            text : `${username} vient de quitter :'(`,\n        });\n        getRoomData();\n    });\n    socket.on('gameLaunching', (roomInfo) =>\n    {\n        Swal.fire({title: 'La partie va commencer !', timer: 2000, timerProgressBar: true, showConfirmButton: false}).then(() =>\n        {\n            history.push('/game/room/' + match.params.roomCode + '/play');\n        });\n    });\n    socket.on('failedToLaunchGame', (roomInfo) =>\n    {\n        Swal.fire('Un problème est survenue lors de la génération de la partie, veuillez recréer le salon si le problème persiste !');\n    });\n    const getRoomData = () =>\n    {\n        axios.get(`https://pyramidsgame.herokuapp.com/api/room/get/${match.params.roomCode}`).then((roomInfo) =>\n        {\n            roomInfo = roomInfo.data;\n            if (typeof (roomInfo.error) === 'string') {\n                Swal.fire(roomInfo.error);\n                history.push('/');\n            }\n            if (roomInfo.isStarted) {\n                history.push('/game/room/' + roomInfo.code + '/play');\n            }\n            setGameRoom(roomInfo);\n        }).catch((err) =>\n        {\n            Swal.fire('Une erreur est survenue lors de l\\'obtention des données.' + err);\n            history.push('/');\n        });\n    };\n\n    const handleGameStart = () =>\n    {\n        socket.emit('hostLaunchGame');\n    };\n\n    const isHost = gameRoom.players !== undefined && gameRoom.players.find(p => p.isHost === true && p.cookieID === cookies.userID) !== undefined;\n    return (\n        <Grid container spacing={4}>\n            <Grid item xs={12}>\n                <Typography variant={'h4'}>Bienvenue dans le salon \"{gameRoom.name}\"</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant={'h6'}>Le code de la salle est : #{gameRoom.code}</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant={'h6'}>Listes des joueurs participants :</Typography>\n                <Grid container spacing={2}>\n                    {gameRoom.players !== undefined && gameRoom.players.map((p, index) => (\n                        <Grid key={index} item>\n                            <PlayerCard playerName={p.username} isHost={p.isHost}/>\n                        </Grid>\n                    ))}\n                </Grid>\n            </Grid>\n            <Grid item>\n                {isHost && <Button variant={'contained'} color={'primary'} onClick={handleGameStart}>isHost</Button>}\n            </Grid>\n        </Grid>\n    );\n}","export default __webpack_public_path__ + \"static/media/carreau-rouge.862d235a.svg\";","export default __webpack_public_path__ + \"static/media/coeur-noir.d894f52c.svg\";","export default __webpack_public_path__ + \"static/media/coeur-rouge.e088909f.svg\";","export default __webpack_public_path__ + \"static/media/dame-noir.0486fd2b.svg\";","export default __webpack_public_path__ + \"static/media/dame-rouge.acbd5eb1.svg\";","export default __webpack_public_path__ + \"static/media/pique-noir.5ea8168d.svg\";","export default __webpack_public_path__ + \"static/media/pique-rouge.1fff2dad.svg\";","export default __webpack_public_path__ + \"static/media/roi-noir.c4427e39.svg\";","export default __webpack_public_path__ + \"static/media/roi-rouge.a3367f74.svg\";","export default __webpack_public_path__ + \"static/media/trefle-noir.f12b015f.svg\";","export default __webpack_public_path__ + \"static/media/trefle-rouge.eb4b1690.svg\";","export default __webpack_public_path__ + \"static/media/valet-noir.53f5ba12.svg\";","export default __webpack_public_path__ + \"static/media/valet-rouge.bd78b190.svg\";","export default __webpack_public_path__ + \"static/media/picole-nationale.2be82184.jpg\";","import {Component} from 'react';\nimport './card.css';\nimport CARREAUROUGE from './img/carreau-rouge.svg';\nimport COEURNOIR from './img/coeur-noir.svg';\nimport COEURROUGE from './img/coeur-rouge.svg';\nimport DAMENOIR from './img/dame-noir.svg';\nimport DAMEROUGE from './img/dame-rouge.svg';\nimport PIQUENOIR from './img/pique-noir.svg';\nimport PIQUEROUGE from './img/pique-rouge.svg';\nimport ROINOIR from './img/roi-noir.svg';\nimport ROIROUGE from './img/roi-rouge.svg';\nimport TREFLENOIR from './img/trefle-noir.svg';\nimport TREFLEROUGE from './img/trefle-rouge.svg';\nimport VALETNOIR from './img/valet-noir.svg';\nimport VALETROUGE from './img/valet-rouge.svg';\nimport PICOLENATIONAL from './img/picole-nationale.jpg';\nimport {url} from 'socket.io-client/build/url';\nimport socket from '../Socket';\nimport Swal from 'sweetalert2';\n\nclass CardModel extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            isBackFace: this.props.isBackFace,\n            bouncing  : false,\n        };\n    }\n\n    lettersHandler = (letters) =>\n    {\n        switch (letters) {\n            case 'J':\n                return 'valet';\n            case 'Q':\n                return 'dame';\n            case 'K':\n                return 'roi';\n            case null:\n                return null;\n            default:\n                throw new Error('Ce type de carte n\\'existe pas. ' + letters);\n        }\n    };\n\n    imageHandler = (imageToSearch) =>\n    {\n        let image = null;\n        switch (imageToSearch) {\n            case 'carreau-rouge.svg':\n                image = CARREAUROUGE;\n                break;\n            case 'coeur-noir.svg':\n                image = COEURNOIR;\n                break;\n            case 'coeur-rouge.svg':\n                image = COEURROUGE;\n                break;\n            case 'dame-noir.svg':\n                image = DAMENOIR;\n                break;\n            case 'dame-rouge.svg':\n                image = DAMEROUGE;\n                break;\n            case 'pique-noir.svg':\n                image = PIQUENOIR;\n                break;\n            case 'pique-rouge.svg':\n                image = PIQUEROUGE;\n                break;\n            case 'roi-noir.svg':\n                image = ROINOIR;\n                break;\n            case 'roi-rouge.svg':\n                image = ROIROUGE;\n                break;\n            case 'trefle-noir.svg':\n                image = TREFLENOIR;\n                break;\n            case 'trefle-rouge.svg':\n                image = TREFLEROUGE;\n                break;\n            case 'valet-noir.svg':\n                image = VALETNOIR;\n                break;\n            case 'valet-rouge.svg':\n                image = VALETROUGE;\n                break;\n            default:\n                image = 'TOZ';\n        }\n        return image;\n    };\n\n\n    handleClickOnCard = (e) =>\n    {\n        if (this.props.canFlipCard) {\n            socket.emit('flipCard', this.props.cardid, this.props.ranknumber, this.props.cardnumber);\n        }\n    };\n\n    componentDidMount()\n    {\n        socket.on('onCardFlip', (cardID, cardRank) =>\n        {\n            if (this.props.cardid === cardID && this.props.ranknumber === cardRank) {\n                this.setState({isBackFace: false, bouncing: false});\n            }\n        });\n        socket.on('onCardCannotFlip', cardNumber =>\n        {\n            if (this.props.cardnumber === cardNumber) {\n                this.setState({bouncing: true});\n            }\n        });\n        if (this.props.canSeeCard === false) {\n            let timeInSecond = 60;\n            let timerInterval;\n            Swal.fire({\n                title           : 'Attention!',\n                toast           : true,\n                position        : 'top',\n                icon            : 'warning',\n                html            : 'Il vous reste <b></b> pour retenir vos cartes.',\n                timer           : 60000,\n                timerProgressBar: true,\n                didOpen         : () =>\n                {\n                    Swal.showLoading();\n                    timerInterval = setInterval(() =>\n                    {\n                        const content = Swal.getHtmlContainer();\n                        if (content) {\n                            const b = content.querySelector('b');\n                            if (b) {\n                                b.textContent = (Swal.getTimerLeft() / 1000).toFixed(1);\n                            }\n                        }\n                    }, 100);\n                },\n                willClose       : () =>\n                {\n                    clearInterval(timerInterval);\n                },\n            }).then((result) =>\n            {\n                /* Read more about handling dismissals below */\n                if (result.dismiss === Swal.DismissReason.timer) {\n                    console.log('I was closed by the timer');\n                }\n            });\n            setTimeout(() =>\n            {\n                this.setState({isBackFace: true});\n            }, timeInSecond * 1000);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        if (this.state.bouncing === true) {\n            setTimeout(() =>\n            {\n                this.setState({bouncing: false});\n            }, 10000);\n        }\n    }\n\n\n    render()\n    {\n        const letters = this.props.letters;\n        let image = null;\n        if (letters !== null) {\n            const iconType = this.lettersHandler(letters);\n            image = this.imageHandler(`${iconType}-${this.props.color}.svg`);\n        }\n        else {\n            image = this.imageHandler(`${this.props.iconType}-${this.props.color}.svg`);\n        }\n        const classOfParent = (this.state.isBackFace ? 'card flipped' : 'card') + (this.state.bouncing ? ' heartbeat' : '');\n        console.log(classOfParent);\n        return (\n            <div className={classOfParent}\n                 onClick={this.handleClickOnCard}>\n                <div className={'back face'} style={{backgroundImage: `url(${PICOLENATIONAL})`}}/>\n                <div className={'front face'}>\n                    <p className={'top-left-number'}>{this.props.number ?? this.props.letters}</p>\n                    <p className={'top-right-number'}>{this.props.number ?? this.props.letters}</p>\n                    <p className={'bottom-left-number'}>{this.props.number ?? this.props.letters}</p>\n                    <p className={'bottom-right-number'}>{this.props.number ?? this.props.letters}</p>\n                    <div className={`card-icons-container card-icons-container-${this.props.number ?? this.props.letters}`}>\n                        {this.props.number !== null ? [...Array(this.props.number)].map((x, i) =>\n                            <div key={i} className=\"card-icon-container\">\n                                <div className=\"card-icon\"\n                                     style={{\n                                         background      : `url(${image})`,\n                                         height          : '30px',\n                                         width           : '30px',\n                                         backgroundSize  : 'cover',\n                                         backgroundRepeat: 'no-repeat',\n                                     }}>\n                                </div>\n                            </div>,\n                        ) : ''}\n                        {this.props.letters !== null ?\n                            <div className={'card-img-icon'}>\n                                <img src={image} alt={this.props.iconType}/>\n                            </div>\n                            : ''}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CardModel;","import {useQuery} from 'react-query';\nimport Swal from 'sweetalert2';\nimport {useEffect, useState} from 'react';\nimport {useHistory, useRouteMatch} from 'react-router-dom';\nimport socket from './Socket';\nimport {Grid, Typography} from '@material-ui/core';\nimport CardModel from './Card/CardModel';\nimport axios from 'axios';\nimport {useCookies} from 'react-cookie';\n\nexport default function PlayGameRoom()\n{\n    let match = useRouteMatch('/game/room/:roomCode/play');\n    let history = useHistory();\n    const [cookies, setCookie] = useCookies(['userID']);\n    const [gameRoom, setGameRoom] = useState({});\n    const [isBackFace, setIsBackFace] = useState(true);\n\n    useEffect(() =>\n    {\n        getRoomData();\n    }, []);\n    useEffect(() =>\n    {\n        socket.emit('verifyUserIsOnLeavePlayerOrInGameRoom', match.params.roomCode, cookies.userID);\n        socket.on('onUserCannotJoinCauseOfNotInRoom', () =>\n        {\n            Swal.fire({\n                title: `Salut, tu doit rejoindre la partie par le formulaire !`,\n                icon : 'warning',\n            });\n            history.push('/game/join/' + match.params.roomCode);\n        });\n        socket.on('roomExistButAlreadyStarted', () =>\n        {\n            Swal.fire({\n                title: `Désolé, la partie que tu recherche existe mais elle est déjà en cours ! Créer en une !`,\n                icon : 'warning',\n            });\n            history.push('/');\n        });\n        socket.emit('userAttemptToJoinRoom', match.params.roomCode, cookies.userID);\n        socket.on('roomExistButAlreadyStarted', () =>\n        {\n            Swal.fire({\n                title: `Désolé, la partie que tu recherche existe mais elle est déjà en cours ! Créer en une !`,\n                icon : 'warning',\n            });\n        });\n        socket.on('userFoundInLeavePlayer', (playerInfo) =>\n        {\n            Swal.fire({\n                title            : `Hey ${playerInfo.username} ! Tu nous as quitté trop vite ! Veux tu continuer à jouer ?`,\n                showDenyButton   : true,\n                showCancelButton : true,\n                confirmButtonText: `Rejoindre`,\n                denyButtonText   : `Rage quitte`,\n            }).then((result) =>\n            {\n                if (result.isConfirmed) {\n                    socket.emit('userConfirmedJoiningAgain', match.params.roomCode, cookies.userID);\n                    socket.on('onJoiningAgainSuccess', () =>\n                    {\n                        getRoomData();\n                        Swal.fire('Tu as de nouveau rejoint la partie !', '', 'success');\n                    });\n                    socket.on('onJoiningAgainFail', () =>\n                    {\n                        Swal.fire('Désolé un problème est survenue, on a pas retrouvé t\\'es données de partie :( !', '', 'error');\n                    });\n                }\n                else if (result.isDenied) {\n                    Swal.fire({\n                        title            : `Tempis casse toi !`,\n                        text             : 'Mais tu est sûr ?',\n                        showDenyButton   : true,\n                        showCancelButton : true,\n                        confirmButtonText: `Non enfaite.`,\n                        denyButtonText   : `Ouai mec !`,\n                    }, '', 'warning').then(secondRes =>\n                    {\n                        if (secondRes.isConfirmed) {\n                            socket.emit('userConfirmedJoiningAgain', match.params.roomCode, cookies.userID);\n                            socket.on('onJoiningAgainSuccess', () =>\n                            {\n                                getRoomData();\n                                Swal.fire('Tu as de nouveau rejoint la partie chakal va !', '', 'success');\n                            });\n                            socket.on('onJoiningAgainFail', () =>\n                            {\n                                Swal.fire('Ah bas désolé un problème est survenue, on a pas retrouvé t\\'es données de partie :( ! Rage quitte forcé !', '', 'error');\n                            });\n                        }\n                        else if (secondRes.isDenied) {\n                            socket.emit('deleteLeavePlayerIfExist', match.params.roomCode, cookies.userID);\n                            history.push('/');\n                        }\n                    });\n                }\n            });\n        });\n        socket.on('userJoinedRoomAfterLeave', (username) =>\n        {\n            Swal.fire({\n                toast: true,\n                text : `${username} vient de revenir !`,\n            });\n            getRoomData();\n        });\n        socket.on('userJoinedRoom', (username) =>\n        {\n            Swal.fire({\n                toast: true,\n                text : `${username} vient de rejoindre !`,\n            });\n            getRoomData();\n        });\n        socket.on('userDisconnect', (username) =>\n        {\n            Swal.fire({\n                toast: true,\n                text : `${username} vient de quitter :'(`,\n            });\n            getRoomData();\n        });\n    });\n\n    const getRoomData = () =>\n    {\n        axios.get(`https://pyramidsgame.herokuapp.com/api/room/get/${match.params.roomCode}`).then((roomInfo) =>\n        {\n            roomInfo = roomInfo.data;\n            if (typeof (roomInfo.error) === 'string') {\n                Swal.fire(roomInfo.error);\n                history.push('/');\n            }\n            setGameRoom(roomInfo);\n        }).catch((err) =>\n        {\n            Swal.fire('Une erreur est survenue lors de l\\'obtention des données.' + err);\n            history.push('/');\n        });\n    };\n\n    const currentPlayer = gameRoom.players !== undefined && gameRoom.players.find(p => p.cookieID === cookies.userID);\n    const isHost = currentPlayer !== undefined ? currentPlayer.isHost : false;\n    const totalCardInGame = gameRoom.cards !== undefined ? [].concat.apply([], gameRoom.cards) : false;\n    if (currentPlayer === undefined) return 'En attente d\\'une intéraction ou vous ne pouvez pas rejoindre la partie...';\n    let cardNumber = 1;\n    return (\n        <>\n            <Typography>{isHost ? 'Vous êtes l\\'hote' : ''}</Typography>\n            <Typography>{totalCardInGame.length} cartes en jeu !</Typography>\n            {gameRoom.cards && gameRoom.cards.map((rank, rankNumber) =>\n            {\n                return (\n                    <div key={rankNumber} style={{margin: '0 1rem', display: 'flex', justifyContent: 'center'}}>\n                        {rank.map((card, index) =>\n                        {\n                            return (\n                                <div key={index}>\n                                    <CardModel key={card.id} cardid={card.id} cardnumber={cardNumber++} ranknumber={rankNumber} iconType={card.iconType} number={card.number}\n                                               letters={card.letters} color={card.color} isBackFace={card.isFlipped} canFlipCard={isHost}/>\n                                </div>\n                            );\n                        })}\n                    </div>\n                );\n            })}\n            <Typography>Vos cartes</Typography>\n            <div style={{display: 'flex'}}>\n                {currentPlayer.cards !== undefined && currentPlayer.cards.map(card =>\n                {\n                    return (\n                        <CardModel key={card.id} iconType={card.iconType} canFlipCard={true} number={card.number} letters={card.letters}\n                                   color={card.color} canSeeCard={gameRoom.userCanSeeHerCard}/>\n                    );\n                })}\n            </div>\n        </>);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n} from 'react-router-dom';\nimport App from './App';\nimport {QueryClient, QueryClientProvider} from 'react-query';\nimport {CookiesProvider} from 'react-cookie';\nimport Appbar from './Appbar';\nimport CreateGame from './CreateGame';\nimport JoinGame from './JoinGame';\nimport GameRoom from './GameRoom';\nimport PlayGameRoom from './PlayGameRoom';\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n    <React.StrictMode>\n        <QueryClientProvider client={queryClient}>\n            <CookiesProvider>\n                <Router>\n                    <Appbar title={'Accueil'}/>\n                    <Switch>\n                        <Route exact path=\"/game/room/:roomCode/play\">\n                            <PlayGameRoom/>\n                        </Route>\n                        <Route exact path=\"/game/room/:roomCode\">\n                            <GameRoom/>\n                        </Route>\n                        <Route exact path=\"/game/join/:roomCode?\">\n                            <JoinGame/>\n                        </Route>\n                        <Route exact path=\"/game/create\">\n                            <CreateGame/>\n                        </Route>\n                        <Route exact path=\"/\">\n                            <App/>\n                        </Route>\n                    </Switch>\n                </Router>\n            </CookiesProvider>\n        </QueryClientProvider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);"],"sourceRoot":""}